{"version":3,"file":"static/js/450.0125f5b4.chunk.js","mappings":"gPACA,GAAgB,UAAY,iCAAiC,KAAO,4BAA4B,MAAQ,6BAA6B,OAAS,+B,UCwE9I,EAnEqB,WACnB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MACbG,EAAc,SAAAC,GAClB,MAAwBA,EAAEC,OAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACD,SAATf,GAAiBC,EAAQc,GAChB,aAATf,GAAqBK,EAAYU,GACxB,UAATf,GAAkBG,EAASY,EAChC,EASD,OACE,iBAAKC,UAAWC,EAAAA,UAAhB,WACE,sCACA,kBAAMD,UAAWC,EAAAA,KAAYC,SAVZ,SAAAL,GACnBA,EAAEM,iBACFb,GAASc,EAAAA,EAAAA,IAAW,CAAEpB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KACnCH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAIG,WACE,kBAAOW,UAAWC,EAAAA,MAAaI,QAASb,EAAxC,kBAES,KACT,kBACEc,KAAK,OACLN,UAAWC,EAAAA,MACXM,GAAIf,EACJR,KAAK,OACLe,MAAOf,EACPwB,SAAUZ,KAEZ,kBAAOI,UAAWC,EAAAA,MAAaI,QAASX,EAAxC,mBAES,KACT,kBACEY,KAAK,QACLN,UAAWC,EAAAA,MACXM,GAAIb,EACJV,KAAK,QACLe,MAAOb,EACPsB,SAAUZ,KAEZ,kBAAOI,UAAWC,EAAAA,MAAaI,QAASV,EAAxC,sBAES,KACT,kBACEW,KAAK,WACLN,UAAWC,EAAAA,MACXM,GAAIZ,EACJX,KAAK,WACLe,MAAOX,EACPoB,SAAUZ,KAEZ,mBAAQI,UAAWC,EAAAA,OAAcK,KAAK,SAAtC,2BAMP,C,wDCtEM,IAkBIb,EAAS,eAACgB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/page/register-page/register-page.module.css?4af8","components/page/register-page/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"register-page_container__+f9cJ\",\"form\":\"register-page_form__kk2Kw\",\"label\":\"register-page_label__phw2D\",\"btnAdd\":\"register-page_btnAdd__dVj-I\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { singupUser } from 'redux/contactSlice';\nimport { singupUser } from 'redux/autchSlice';\nimport style from './register-page.module.css';\nconst RegisterPage = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const idName = nanoid();\n  const idEmail = nanoid();\n  const idPAssword = nanoid();\n  const hundleChang = e => {\n    const { name, value } = e.target;\n    if (name === 'name') setName(value);\n    if (name === 'password') setPassword(value);\n    if (name === 'email') setEmail(value);\n  };\n\n  const hundleSubmit = e => {\n    e.preventDefault();\n    dispatch(singupUser({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n  return (\n    <div className={style.container}>\n      <h1>Register</h1>\n      <form className={style.form} onSubmit={hundleSubmit}>\n        <label className={style.label} htmlFor={idName}>\n          Name\n        </label>{' '}\n        <input\n          type=\"name\"\n          className={style.input}\n          id={idName}\n          name=\"name\"\n          value={name}\n          onChange={hundleChang}\n        />\n        <label className={style.label} htmlFor={idEmail}>\n          Email\n        </label>{' '}\n        <input\n          type=\"email\"\n          className={style.input}\n          id={idEmail}\n          name=\"email\"\n          value={email}\n          onChange={hundleChang}\n        />\n        <label className={style.label} htmlFor={idPAssword}>\n          Password\n        </label>{' '}\n        <input\n          type=\"password\"\n          className={style.input}\n          id={idPAssword}\n          name=\"password\"\n          value={password}\n          onChange={hundleChang}\n        />\n        <button className={style.btnAdd} type=\"submit\">\n          Register\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","idName","nanoid","idEmail","idPAssword","hundleChang","e","target","value","className","style","onSubmit","preventDefault","singupUser","htmlFor","type","id","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}